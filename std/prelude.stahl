(module std:prelude
  Bool false true elim-Bool
  const
  Fixnum fixnum-add
  ; Eq elim-Eq refl
  id
  ; List nil-List cons-List elim-List
  ; Nat zero succ elim-Nat S Z plus-Nat
  String
  Symbol
  the
  TYPE
  type-of
  Unit unit elim-Unit
  ; Vect nil-Vect cons-Vect elim-Vect
  Void elim-Void)

(import compiler-builtins
  Fixnum fixnum-add String Symbol TYPE)

def const (pi ((T TYPE) (U TYPE) (_ T)) (pi ((_ U)) T))
  fn (_ _ x) (fn (_) x)

def id (pi ((T TYPE) (_ T)) T)
  fn (_ x) x

def the (pi ((T TYPE) (_ T)) T)
  fn (_ x) x

def type-of (pi ((T TYPE) (_ T)) TYPE)
  fn (T _) T

defty Void TYPE

defty Unit TYPE
  unit Unit

defty Bool TYPE
  false Bool
  true Bool

; defty Nat TYPE
;   zero Nat
;   succ (pi ((_ Nat)) Nat)

; def plus-Nat (pi ((_ Nat) (_ Nat)) Nat)
;   fn (x y)
;     elim-Nat
;       fn (_) Nat
;       y
;       fn (_ prev) (succ prev)
;       x

; def S succ
; def Z zero

; defty List (pi ((T TYPE)) TYPE)
;   nil-List  (pi ((T TYPE))                    (List T))
;   cons-List (pi ((T TYPE) (_ T) (_ (List T))) (List T))

; defty Vect (pi ((T TYPE) (_ Nat)) TYPE)
;   nil-Vect  (pi ((T TYPE))                              (Vect T zero))
;   cons-Vect (pi ((T TYPE) (n Nat) (_ T) (_ (Vect T n))) (Vect T (succ n)))

; defty Eq (pi ((T TYPE) (_ T) (_ T)) TYPE)
;   refl (pi ((T TYPE) (a T)) (Eq T a a))
