(module std/list)
(export List length)
(import std (const))
(import std/nat (Nat S Z))

(type List : (T TYPE) -> TYPE
  (nil : (List T))
  (cons : (hd T) (tl (List T)) -> (List T)))

(elim List elim-List)

(defn length (T TYPE) (l (List T)) -> Nat
  (elim-List T (const Nat)
    Z
    (fn (hd tl n) (S n))))
