use crate::lexer::{Token, LexerError};
use stahl_errors::Location;
use stahl_value::Value;
use stahl_util::{SharedString};

grammar(loc: &Location);

extern {
	type Location = usize;
	type Error = LexerError;

	enum Token {
    	"(" => Token::ParenOpen,
    	")" => Token::ParenClose,
		"_" => Token::Hole,
    	"|" => Token::Pipe,
    	Int => Token::Int(<isize>),
    	String => Token::String(<SharedString>),
    	Symbol => Token::Symbol(<SharedString>),
	}
}

pub Values = <Value*>;

pub Value: Value = {
	"(" <ListBody>,
	<l:@L> "_" <r:@R> => Value::Symbol(loc.clone().span(l, r),
	                                   SharedString::from("_")),
	<l:@L> <n:Int> <r:@R> => Value::Int(loc.clone().span(l, r), n),
	<l:@L> <s:String> <r:@R> => Value::String(loc.clone().span(l, r), s),
	<l:@L> <s:Symbol> <r:@R> => Value::Symbol(loc.clone().span(l, r), s),
};

ListBody: Value = {
	<l:@L> <h: Value> <t: ListBody> <r:@R> => Value::Cons(
		loc.clone().span(l, r),
		Box::new(h),
		Box::new(t),
	),
	"|" <v: Value> ")" => v,
	<l:@L> ")" <r:@R> => Value::Nil(loc.clone().span(l, r)),
};
